stages:
  - docker_image
  - build
  - lint
  - prepare
  - commit

variables:
  DOCKER_IMAGE_HELPER: ${DOCKER_IMAGE_HELPER_TAGLESS}:v0.0.1

build_image:
  stage: docker_image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}/${OS}:${CI_COMMIT_REF_SLUG}
  script:
    - /kaniko/executor
      --cache=true --cache-ttl=168h
      --registry-mirror "${DOCKER_REGISTRY_MIRROR}"
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/.gitlab-ci/${OS}-Dockerfile"
      --destination "${DOCKER_IMAGE}"
  parallel:
    matrix:
      - OS:
          - deb11
          - deb12
          - deb13
          - el8
          - el9
          - el10
          - el10-rpmlint

build-ci-debian:
  stage: build
  image: ${CI_REGISTRY_IMAGE}/${OS}:${CI_COMMIT_REF_SLUG}
  script:
    - .gitlab-ci/build-debian.sh
  artifacts:
    name: "swprobe-${OS}-${ARCH}-${CI_COMMIT_REF_NAME}"
    paths: # dynamic variables (exported from script) cannot be used
      - ./bookworm
      - ./bullseye
      - ./trixie
  dependencies: [] # Don't download any artifacts
  parallel:
    matrix:
      - ARCH: amd64
        OS:
          - deb11
          - deb12
          - deb13
      - ARCH: arm64
        OS:
          - deb12
          - deb13
        CROSS_ARM64: "true"


build-ci-el:
  stage: build
  image: ${CI_REGISTRY_IMAGE}/${OS}:${CI_COMMIT_REF_SLUG}
  script:
    - .gitlab-ci/build-el.sh
  artifacts:
    name: "swprobe-${OS}-${CI_COMMIT_REF_NAME}"
    paths:
      - ./${OS}
  dependencies: [] # Don't download any artifacts
  parallel:
    matrix:
      - OS:
        - el8
        - el9
        - el10

lint-ci-el:
  stage: lint
  only:
    - branches
  image: ${CI_REGISTRY_IMAGE}/${OS}:${CI_COMMIT_REF_SLUG}
  script:
    - .gitlab-ci/lint-el.sh
  artifacts:
    name: "swprobe-${OS}-${CI_COMMIT_REF_NAME}-lint-report"
    paths:
      - ./lint_report
  dependencies:
    - build-ci-el # Only download artifacts for EL
  parallel:
    matrix:
      - OS:
        - el8
        - el9
        - el10-rpmlint

.prepare-ci:
  stage: prepare
  image: ${DOCKER_IMAGE_HELPER}
  script:
    - source /helper/ci/ci.sh
    - init "${distcode}"
    - prepare
  artifacts:
    name: "${distcode}-deployable-${CI_COMMIT_REF_NAME}"
    paths:
      - ./${distcode}-deployable
  needs: # skips waiting on lint + only downloads build-ci artifacts
    - job: build-ci-debian
    - job: build-ci-el
  parallel:
    matrix:
      - distcode:
          - el8
          - el9
          - el10
      - distcode:
          - bullseye
          - bookworm
          - trixie

prepare-ci-devel:
    extends: .prepare-ci
    only:
      - /^devel.*/
    environment:
      name: devel

prepare-ci-testing:
    extends: .prepare-ci
    only:
      - /^testing.*/
    environment:
      name: testing

prepare-ci-master:
    extends: .prepare-ci
    only:
      - /^master$/
    environment:
      name: master

approve-ci:
  stage: commit
  only:
    - /^devel.*/
    - /^testing.*/
    - /^master$/
  script: ':'
  when: manual

.commit-ci:
  stage: commit
  image: ${DOCKER_IMAGE_HELPER}
  script:
    - source /helper/ci/ci.sh
    - commit "${distcode}-deployable"
  parallel:
    matrix:
      - distcode:
          - el8
          - el9
          - el10
      - distcode:
          - bullseye
          - bookworm
          - trixie
  resource_group: commit

commit-ci-devel:
    needs:
        - job: prepare-ci-devel
          artifacts: true
        - job: approve-ci
    only:
      - /^devel.*/
    extends: .commit-ci
    environment:
      name: devel

commit-ci-testing:
    needs:
        - job: prepare-ci-testing
          artifacts: true
        - job: approve-ci
    only:
      - /^testing.*/
    extends: .commit-ci
    environment:
      name: testing

commit-ci-master:
    needs:
        - job: prepare-ci-master
          artifacts: true
        - job: approve-ci
    only:
      - /^master$/
    extends: .commit-ci
    environment:
      name: master

.changelog:
  image: python:3.11-alpine
  stage: prepare
  script:
    - apk add git bash
    - export SOFTWARE_PROBE_REPO="${PWD}"
    - git clone ${CHANGELOG_REPO}
    - $CHANGELOG
  artifacts:
    name: changelog-${CI_COMMIT_REF_NAME}
    paths:
      - $CHANGELOG_FILE
    when: always # artifacts get produced when job fails
  needs: []

changelog-manual:
  extends: .changelog
  except:
    - master
    - testing
  allow_failure: true
  when: manual

changelog-automatic:
  extends: .changelog
  only:
    - master
    - testing
