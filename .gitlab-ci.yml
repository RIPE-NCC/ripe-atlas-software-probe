stages:
  - docker_image
  - build
  - lint
  - prepare
  - deploy

variables:
  DOCKER_IMAGE_PREP: ${CI_REGISTRY_IMAGE}/prep:${CI_COMMIT_REF_SLUG}

build_image:
  stage: docker_image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}/${OS}:${CI_COMMIT_REF_SLUG}
  script:
    - /kaniko/executor
      --cache=true --cache-ttl=168h
      --registry-mirror "${DOCKER_REGISTRY_MIRROR}"
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/.gitlab-ci/${OS}-Dockerfile"
      --destination "${DOCKER_IMAGE}"
  parallel:
    matrix:
      - OS:
          - deb11
          - deb12
          - deb12-arm64
          - deb13
          - ol8
          - ol9
          - ol10
          - ol10-rpmlint
          - prep

build-ci-debian:
  stage: build
  image: ${CI_REGISTRY_IMAGE}/${OS}:${CI_COMMIT_REF_SLUG}
  script:
    - export OS_VERSION="$( . /etc/os-release && echo $VERSION_CODENAME )" # extract debian release codename (e.g. bookworm)
    - mkdir -p ${OS_VERSION}/main/binary-${ARCH}   # create a repo with same structure as prod
    - dpkg-buildpackage -b ${CROSS_ARGS} -us -uc
    - pushd .repo
    - dpkg-buildpackage -b ${CROSS_ARGS} -us -uc
    - popd
    - mv {..,.}/ripe-atlas-*.deb ${OS_VERSION}/main/binary-${ARCH}
    - mv VERSION ${OS_VERSION}
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}"
    paths: # dynamic variables (exported from script) cannot be used
      - ./bookworm
      - ./bullseye
      - ./trixie
    expire_in: never
  dependencies: [] # Don't download any artifacts
  parallel:
    matrix:
      - ARCH: amd64
        OS:
          - deb11
          - deb12
          - deb13
      - ARCH: arm64
        OS:
          - deb12-arm64
          - deb13
        CROSS_COMPILE: aarch64-linux-gnu-
        CROSS_ARGS: -aarm64 -Pcross,nocheck


build-ci-rhel:
  stage: build
  image: ${CI_REGISTRY_IMAGE}/${OS}:${CI_COMMIT_REF_SLUG}
  variables:
    RPMS_DIR: rpmbuild/RPMS
    REPO_RPM_PATH: ${RPMS_DIR}/noarch/*.rpm
    X86_RPM_PATH: ${RPMS_DIR}/x86_64/*.rpm
    REPO_GIT_SOURCE: https://${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}@${URL}
  script:
    - export OS_VERSION="$( . /etc/os-release && echo $PLATFORM_ID | cut -d':' -f2 )" # extract el release (e.g. el9)
    - export HOME="${PWD}" # rpmbuild seems to use HOME for some folders
    # build define list
    - export REPO_GIT_TAG="${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}"
    - mkdir -p ${OS_VERSION}/{noarch,x86_64}   # create a repo with same structure as prod

    # build repo rpm
    - pushd .repo
    - rpmbuild -bb --define "git_source ${REPO_GIT_SOURCE}" --define "git_tag ${REPO_GIT_TAG}" rhel/ripe-atlas-repo.spec
    - popd
    - cp -a ${REPO_RPM_PATH} ${OS_VERSION}/noarch

    # build x86_64 rpm
    - rpmbuild -bb --define "git_source ${REPO_GIT_SOURCE}" --define "git_tag ${REPO_GIT_TAG}" rhel/ripe-atlas-probe.spec
    - cp -a ${REPO_RPM_PATH} ${OS_VERSION}/noarch
    - cp -a ${X86_RPM_PATH} ${OS_VERSION}/x86_64
    - cp rpmbuild/BUILD/ripe-atlas-software-probe/VERSION ${OS_VERSION}

    # build anchor rpm
    - rpmbuild -bb --define "git_source ${REPO_GIT_SOURCE}" --define "git_tag ${REPO_GIT_TAG}" rhel/ripe-atlas-anchor.spec
    - cp -a ${REPO_RPM_PATH} ${OS_VERSION}/noarch
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}"
    paths: # dynamic variables (exported from script) cannot be used
      - ./el8
      - ./el9
      - ./el10
    expire_in: never
  dependencies: [] # Don't download any artifacts
  parallel:
    matrix:
      - OS:
        - ol8
        - ol9
        - ol10

lint-ci-rhel:
  stage: lint
  only:
    - branches
  image: ${CI_REGISTRY_IMAGE}/${OS}:${CI_COMMIT_REF_SLUG}
  script:
    - export OS_VERSION="$( . /etc/os-release && echo $PLATFORM_ID | cut -d':' -f2 )" # extract el release (e.g. el9)
    - mkdir lint_report
    - for RPM in $(find ${OS_VERSION} -type f); do rpmlint $RPM > lint_report/$(echo $RPM | sed -n "s/^.*\/\s*\(\S*\)-.*$/\1.log/p") ; done || true
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-lint-report"
    paths:
      - ./lint_report
    expire_in: never
  dependencies:
    - build-ci-rhel # Only download artifacts for RHEL
  parallel:
    matrix:
      - OS:
        - ol8
        - ol9
        - ol10-rpmlint

.prepare-ci:
  stage: prepare
  image: ${DOCKER_IMAGE_PREP}
  script:
    - eval "${PREPARE}"
    - cp -a ${OS_VERSION} ${OS_VERSION}-deployable
  artifacts:
    name: "${OS_VERSION}-deployable"
    paths:
      - ./${OS_VERSION}-deployable
    expire_in: never
  parallel:
    matrix:
      - OS_DISTRIBUTION: rhel
        OS_VERSION:
          - el8
          - el9
          - el10
      - OS_DISTRIBUTION: debian
        OS_VERSION:
          - bullseye
          - bookworm
          - trixie

prepare-ci-devel:
    extends: .prepare-ci
    only:
      - /^devel.*/
    environment:
      name: devel

prepare-ci-testing:
    stage: prepare
    only:
      - /^testing$/
    extends: .prepare-ci
    environment:
      name: testing

prepare-ci-master:
    stage: prepare
    only:
      - /^master$/
    extends: .prepare-ci
    environment:
      name: master

approve-ci:
  stage: deploy
  only:
    - /^devel.*/
    - /^testing$/
    - /^master$/
  script: ':'
  when: manual

.deploy-ci:
  stage: deploy
  variables:
    REPO_GIT_SOURCE: https://${DEPLOY_USER}:${DEPLOY_TOKEN}@${URL}
    TARGET: ${OS_DISTRIBUTION}/${DEBIAN_ONLY}${OS_VERSION}
  image: ${DOCKER_IMAGE_PREP}
  script:
    - eval "${DEPLOY}"
  parallel:
    matrix:
      - OS_DISTRIBUTION: rhel
        OS_VERSION:
          - el8
          - el9
          - el10
      - OS_DISTRIBUTION: debian
        DEBIAN_ONLY: dists/
        OS_VERSION:
          - bullseye
          - bookworm
          - trixie
  resource_group: deploy

deploy-ci-devel:
    needs:
        - job: prepare-ci-devel
          artifacts: true
        - job: approve-ci
    only:
      - /^devel.*/
    extends: .deploy-ci
    environment:
      name: devel

deploy-ci-testing:
    needs:
        - job: prepare-ci-testing
          artifacts: true
        - job: approve-ci
    only:
      - /^testing$/
    extends: .deploy-ci
    environment:
      name: testing

deploy-ci-master:
    needs:
        - job: prepare-ci-master
          artifacts: true
        - job: approve-ci
    only:
      - /^master$/
    extends: .deploy-ci
    environment:
      name: master

.changelog:
  image: python:3.11-alpine
  stage: prepare
  script:
    - apk add git bash
    - export SOFTWARE_PROBE_REPO="${PWD}"
    - git clone ${CHANGELOG_REPO}
    - $CHANGELOG
  artifacts:
    paths:
      - $CHANGELOG_FILE
    when: always # artifacts get produced when job fails
  needs: []

changelog-manual:
  extends: .changelog
  except:
    - master
    - testing
  allow_failure: true
  when: manual

changelog-automatic:
  extends: .changelog
  only:
    - master
    - testing
